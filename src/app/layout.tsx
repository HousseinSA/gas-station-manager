import type { Metadata } from "next"
import "./globals.css"
import { NextIntlClientProvider } from "next-intl"
import fs from "fs"
import path from "path"

// âœ… Import Google Fonts via next/font/google
import { Tajawal, Inter } from "next/font/google"

const tajawal = Tajawal({
  subsets: ["arabic"],
  variable: "--font-tajawal",
  weight: ["300", "400", "500", "700", "800"],
  display: "swap",
})

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
  weight: ["300", "400", "500", "700"],
  display: "swap",
})

export const metadata: Metadata = {
  title: "Gestion Stations-Service",
  description: "Generated by create next app",
}

function getLocaleFromCookie(headers: Headers) {
  const cookie = headers.get("cookie") || ""
  const match = cookie.match(/(^|;)\s*NEXT_LOCALE=([^;]+)/)
  return match ? decodeURIComponent(match[2]) : "fr"
}

export default async function RootLayout({
  children,
  headers,
}: Readonly<{
  children: React.ReactNode
  headers?: Headers
}>) {
  const locale = getLocaleFromCookie(headers ?? new Headers())

  const tryPaths = [
    path.join(process.cwd(), "messages", `${locale}.json`),
    path.join(process.cwd(), "locales", `${locale}.json`),
  ]
  let messages: Record<string, any> = {}
  for (const p of tryPaths) {
    try {
      if (fs.existsSync(p)) {
        const raw = fs.readFileSync(p, "utf-8")
        messages = JSON.parse(raw)
        break
      }
    } catch (e) {
      console.warn(`Could not load locale messages from ${p}`, e)
    }
  }

  const fontClass = locale === "ar" ? tajawal.variable : inter.variable

  return (
    <html
      lang={locale}
      dir={locale === "ar" ? "rtl" : "ltr"}
      className={`${fontClass}`}
    >
      <body className="font-sans bg-gray-50 text-gray-900">
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  )
}
